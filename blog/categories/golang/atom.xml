<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Golang | i4box's Blog]]></title>
  <link href="http://i4box.com/blog/categories/golang/atom.xml" rel="self"/>
  <link href="http://i4box.com/"/>
  <updated>2016-04-01T13:37:22+08:00</updated>
  <id>http://i4box.com/</id>
  <author>
    <name><![CDATA[i4box]]></name>
    <email><![CDATA[jinhao2011@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Golang Map 学习]]></title>
    <link href="http://i4box.com/blog/2016/03/31/golang-map-zai-rangeqi-jian-deletecao-zuo-an-quan/"/>
    <updated>2016-03-31T11:21:58+08:00</updated>
    <id>http://i4box.com/blog/2016/03/31/golang-map-zai-rangeqi-jian-deletecao-zuo-an-quan</id>
    <content type="html"><![CDATA[<h3>一、定义</h3>

<ol>
<li><h5>大概是这个样子的：</h5>

<p><code>map[KeyType]ValueType</code></p></li>
<li><h5>传值or传引用</h5>

<p>golang map和string slice一样都为引用类型，传递时默认就是传指针的；</p></li>
<li><h5>声明一个map</h5>

<p><code>var m map[string]int</code>, m默认值为nil，如果直接使用会引起panic，必须先初始化；</p></li>
<li><h5>初始化</h5>

<p><code>m = make(map[string]int)</code>或者直接定义 <code>m := map[string]int{}</code>;</p></li>
<li><h5>插入</h5>

<p><code>m["hi"] = 1</code>, key不存在相当于插入，存在相当于覆盖</p></li>
<li><h5>删除</h5>

<p><code>delete(m, "hi")</code>,key不存在也没有关系，不会进行任何操作；</p></li>
<li><h5>判断key是否存在</h5>

<p><code>v, ok := m["hi"]</code> key存在则ok返回为<code>true</code>，不存在ok未<code>false</code></p></li>
<li><h5>遍历</h5>

<p><code>for k, v := range map</code></p></li>
</ol>


<h3>二、map遍历操作是无序的</h3>

<p><strong>example</strong></p>

<pre><code>package main

import "fmt"

func main() {
    var m map[int]string
    m = make(map[int]string)
    for i := 0; i &lt; 10; i++ {
        m[i] = "hi" 
    }

    for i := 0; i &lt; 5; i++ {
        for k := range m {
            fmt.Print(k)
            fmt.Print(" ")
        }
        fmt.Println()
    }
}
</code></pre>

<p> <strong>result:</strong></p>

<pre><code>4 5 6 9 7 8 0 1 2 3
1 2 3 7 8 0 5 6 9 4
4 5 6 9 8 0 1 2 3 7
4 5 6 9 7 8 0 1 2 3
1 2 3 7 8 0 5 6 9 4    
</code></pre>

<p> 需要有序遍历只能自己再弄一个sorted slice了，参考<a href="https://blog.golang.org/go-maps-in-action#TOC_7.">官方文档</a></p>

<h3>三、并发访问安全</h3>

<p> <a href="https://blog.golang.org/go-maps-in-action#TOC_6.">https://blog.golang.org/go-maps-in-action#TOC_6.</a></p>

<h3>四、在range期间delete操作安全</h3>

<h4>结论</h4>

<p>range期间delete操作是安全的</p>

<h4>详细介绍</h4>

<p><a href="http://stackoverflow.com/questions/23229975/is-it-safe-to-remove-selected-keys-from-golang-map-within-a-range-loop">http://stackoverflow.com/questions/23229975/is-it-safe-to-remove-selected-keys-from-golang-map-within-a-range-loop</a></p>
]]></content>
  </entry>
  
</feed>
