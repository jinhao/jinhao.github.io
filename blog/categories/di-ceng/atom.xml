<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 底层 | i4box's Blog]]></title>
  <link href="http://i4box.com/blog/categories/di-ceng/atom.xml" rel="self"/>
  <link href="http://i4box.com/"/>
  <updated>2016-04-06T08:58:19+08:00</updated>
  <id>http://i4box.com/</id>
  <author>
    <name><![CDATA[i4box]]></name>
    <email><![CDATA[jinhao2011@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Data Race学习]]></title>
    <link href="http://i4box.com/blog/2016/03/31/race-free-li-jie/"/>
    <updated>2016-03-31T11:45:56+08:00</updated>
    <id>http://i4box.com/blog/2016/03/31/race-free-li-jie</id>
    <content type="html"><![CDATA[<p>最近准备将<a href="https://github.com/Terry-Mao/gopush-cluster/blob/master/rpc/rand_lb.go#L232">gopush代码中</a>rpc模块提出来复用一下，看到这样段代码，很是不解：</p>

<pre><code>        tmpClients := make(map[string]*WeightRpc, len(r.Clients))
        for addr, client := range r.Clients {
            if client == nil {
                continue
            }
            tmpClients[addr] = client
            if client.Addr == retryAddr {
                client.Client = rpcTmp
            }
        }
        // atomic update clients
        r.Clients = tmpClients
</code></pre>

<p> <!-- more --></p>

<p>代码中需要更新<code>map[string]*WeightRpc</code>这个Clients<em>(该Clients只被这一个goroutine修改，其他多个goroutine回去读)</em>，作者先copy一个临时的map，进行修改后，直接赋值给原map，并注释上这样是原子更新。</p>

<p>以我的理解，这种赋值操作肯定不是原子的，这个赋值操作编译成汇编，生成多个汇编指令，每个汇编指令都可能被中断，因此读该map的goroutine就有可能读到这个赋值的中间状态。于是我就在提了个<a href="https://github.com/Terry-Mao/gopush-cluster/issues/44">issue</a>，期望得到作者的解答(目测该项目已经不维护了)。</p>

<h4>求助万能的google：</h4>

<p>找到了<a href="http://yanyiwu.com/work/2015/02/07/golang-concurrency-safety.html">《谈谈go语言编程的并发安全》</a>,文中作者说的是golang中string赋值（单写多读），weedfs作者认为这种情况最多读到过期数据，不影响，最终的结论是：这种清晰可能引起各种不可预期的结果。</p>

<h3>关于data race详细介绍，请看下面几篇文章</h3>

<p><a href="http://preshing.com/20130618/atomic-vs-non-atomic-operations/">Atomic vs. Non-Atomic Operations</a></p>

<p><a href="https://software.intel.com/en-us/blogs/2013/01/06/benign-data-races-what-could-possibly-go-wrong">Benign data races: what could possibly go wrong?</a></p>

<p><a href="http://blog.regehr.org/archives/490">Race Condition vs. Data Race</a></p>
]]></content>
  </entry>
  
</feed>
