<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tcp | i4box的博客]]></title>
  <link href="http://jinhao.github.io/blog/categories/tcp/atom.xml" rel="self"/>
  <link href="http://jinhao.github.io/"/>
  <updated>2014-11-08T15:24:12+08:00</updated>
  <id>http://jinhao.github.io/</id>
  <author>
    <name><![CDATA[i4box]]></name>
    <email><![CDATA[jinhao2011@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fin_wait1状态测试]]></title>
    <link href="http://jinhao.github.io/blog/2014/11/08/fin-wait1zhuang-tai-ce-shi/"/>
    <updated>2014-11-08T14:47:12+08:00</updated>
    <id>http://jinhao.github.io/blog/2014/11/08/fin-wait1zhuang-tai-ce-shi</id>
    <content type="html"><![CDATA[<p>近日由于<a href="https://github.com/wangbin579/tcpcopy/">tcpcopy</a>群里面在讨论tcp的fin_wait1状态如何消除,以及相关系统阐述修改对fin_wait1状态的影响。
关于fin_wait1状态可先参考<a href="http://huoding.com/2014/11/06/383" title="关于FIN_WAIT1">火丁笔记</a>。</p>

<h2>以下是我的测试</h2>

<!-- more -->


<ul>
<li>系统环境

<blockquote><p>ubuntu12.04  <br/>
内核版本3.5.0-23-generic</p></blockquote></li>
<li><p>测试场景1</p>

<ol>
<li> 服务端172.16.91.101，端口9981，客户端172.16.91.107(通过nc模拟的）</li>
<li> 服务端设置系统参数如下：

<blockquote><p><code>net.ipv4.tcp_max_orphans = 1</code><br/>
<code>net.ipv4.tcp_orphan_retries = 8</code></p></blockquote></li>
<li> 客户端先去连接服务端</li>
<li> 在91.107上通过iptables过滤掉发给101的包<code>iptables -A OUTPUT -d 172.16.91.101 -j DROP</code></li>
<li> ctrl+c关闭服务端，观察与91.107建立的连接状态如下:

<blockquote><p>FIN-WAIT-1 0      1           172.16.91.101:9981         172.16.91.107:55602</p></blockquote></li>
<li>  tcpdump抓包如下：可有看到fin发送在服务端刚好尝试了8次
  <img src="/images/2014/11/08tcpdump-retry8.png" alt=" tcpdump png " />
<strong>结论：</strong><code>tcp_orphan_retries</code>参数为tcp对于处于orphan状态连接的重试次数</li>
</ol>
</li>
<li><p>测试场景2</p>

<ol>
<li> 与场景1相同，只修改系统参数如下：

<blockquote><p><code>net.ipv4.tcp_max_orphans = 0</code></p></blockquote></li>
<li>  通过ss命令看不到fin-wait-1状态</li>
<li>  抓包结果如下:
  <img src="./2014/11/08orp-0.png" alt=" tcpdump png " />
<strong>结论：</strong>由于<code>tcp_max_prphans</code>等于0，因此tcp发送完fin包后直接发送了一个rst包给客户端 (另外经过测试，不在客户端通过iptables过滤掉发送给服务端的包，抓包结果相同，可见服务端发送完fin包后，根本没有等待客户端的ack）。</li>
</ol>
</li>
<li><p>测试场景3</p>

<ol>
<li> 客户端（91.107）连接上服务端（91.101）后，服务端发送大量数据给客户端，直到客户接收缓冲区满了为止，而客户端不接收数据；</li>
<li> 内核参数如下：

<blockquote><p><code>net.ipv4.tcp_max_orphans = 1</code><br/>
<code>net.ipv4.tcp_orphan_retries = 1</code></p></blockquote></li>
<li> 等客户端接收缓存区满了之后，ctrl + c关闭服务端</li>
<li> 观察tcp连接状态，处于orphan状态</li>
<li> 观察tcp抓包，由于tcp缓冲区已满，服务端一直给客户端发送<strong>zero window probes</strong>包，没有发送fin包。</li>
<li> 修改<code>net.ipv4.tcp_max_orphans = 0</code>,继续观察抓包，发现，一会后服务端发送了rst包，orphan状态连接消失。<br/>
<em>tcpdump抓包如下：</em>
  <img src="./2014/11/08tcpdump-fin1.jpg" alt=" tcpdump png " />
<strong>结论：</strong> 在测试系统和对应内核下，修改系统参数<code>net.ipv4.tcp_max_orphans = 0</code>, 可消除orphan状态连接。</li>
</ol>
</li>
</ul>


<p>另：tcpcopy社区讨论中，有部分人测试修改后无效，可能由于老版本内核不支持，据群里面<strong>lazio大神说</strong>最新内核代码看貌似Max参数起了作用。</p>

<p><em>最后，以上结果由本人测试得出，若其中错误，还请指出。</em></p>
]]></content>
  </entry>
  
</feed>
